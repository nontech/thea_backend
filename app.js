import express from 'express'
import { logger } from './middlewares/logger.js'
import mongoose from 'mongoose'
import fileUpload from 'express-fileupload';
import path from 'path';

const app = express()
const PORT = 5000

// db connection
mongoose.connect('mongodb://127.0.0.1:27017/thea_dev')
  .then(() => console.log('Connected to database'))
  .catch((error) => console.log(error))

// schema
const videoSchema = new mongoose.Schema({
  filename: { type: String, required: true },
  size: Number,
  videoUrl: String,
  thumbnailUrl: String,
  duration: { type: Number, required: true },
  recordedOn: String,
  recordedBy: String,
  reviewStatus: { type: [String], default: ["uploaded"] },
  events: { type: [Number], default: [] },
  uploadedOn: String,
  uploadedBy: String,
})

// model
// Mongoose generates a collection name by pluralizing 
// the model name 'Video' to 'videos'
const Video = mongoose.model('Video', videoSchema)
// A third parameter can be given for the collection name
// const Video = mongoose.model('Video', videoSchema, 'myvideos');

// const userSchema = new mongoose.Schema({
//   name: { type: String, required: true },
//   email: { type: String, unique: true, required: true },
//   passwordHash: { type: String, required: true },
//   videos: [videoSchema]
// })

// const episodeSchema = new mongoose.Schema({
//   videoId: videoSchema.id, // foreign key
//   title: { type: String, required: true },
//   description: String,
//   start: { type: Number, required: true },
//   end: { type: Number, required: true },
// })




// Middlewares

// logs to the terminal
// Wed, 26 Apr 2023 09:20:40 GMT Request from ::1 GET /cookies/chocolate-chip
app.use(logger)

// Allow requests from http://localhost:3000
app.use((req, res, next) => {
  res.setHeader('Access-Control-Allow-Origin', 'http://localhost:3000');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
  next();
});

// serves static files from the 'public' folder
// localhost:3000/assets/landing.html
// uses virtual path prefix '/assets'
app.use('/assets', express.static('public'))

// parses JSON bodies
app.use(express.urlencoded({ extended: true }))

// Configurations 
app.set('view engine', 'ejs')

// File Uploads
app.use(fileUpload());

// Routes

// GET / => Home Page
app.get('/', (request, response) => {
  const numberOfVideos = 10

  // Rendering HTML for now
  // Might be useless if frontend renders the page
  response.render('index', { numberOfVideos: numberOfVideos })
})

// GET /videos => All Videos Page
app.get('/videos', (request, response) => {
  console.log(request.query)

  // [TODO]
  // 1. Fetch videos list from database
  // 2. Send as JSON response

  // Rendering HTML for now
  response.render('videos/index', { videos: videos})
})


// API - Upload Video
app.post('/api/upload-video', async (req, res) => {
  // videoFile is an object with the following properties
  // {
  //   name: 'Big_Bunny.mp4',
  //   data: <Buffer 00 00 00 20 06 ... 10546570 more bytes>,
  //   size: 10546620,
  //   encoding: '7bit',
  //   tempFilePath: '',
  //   truncated: false,
  //   mimetype: 'video/mp4',
  //   md5: '5021b3b7c402468d5b018a8b4a2b448a',
  //   mv: [Function: mv]
  // }
  const videoFile = req.files.video

  // get the absolute path of the uploads directory
  const uploadDir = path.resolve('./uploads')
 
  try {
    //  mv()- function by express-fileupload middleware 
    // move the uploaded file to the specified path
    // saves video file on disk to uploads directory
    await videoFile.mv(path.join(uploadDir, videoFile.name))

    // create video metadata object document
    const videoPath = path.join(uploadDir, videoFile.name)
    const { name, size } = videoFile
    // use model to create document
    // _id is generated by Mongoose's ObjectId function 
    // and given a default value
    const videoData = new Video({ 
      filename: name,
      size: size,
      videoUrl: videoPath,
      thumbnailUrl: '',
      duration: 180,
      recordedOn: 'May 9, 2011',
      recordedBy: 'Christian Meisel',
      reviewStatus: ["uploaded"],
      events: [],
      uploadedOn: 'May 10, 2011',
      uploadedBy: 'Gadi Miron',
    });

    // console.log(videoData);
    
    await videoData.save()

    res.status(200).json({ message: 'Video uploaded successfully' });
  } catch (error) {
    console.error(error);
    res.status(500).send('Error uploading file');
  }
});


// GET /videos/1 => Individual Video Page
app.get('/videos/:id', (request, response) => {
  const { id } = request.params

  // [TODO]
  // 1. Fetch video data from database using id
  // 2. Send as JSON response

  response.send('Individual Video Page with id ' + id)
})

// API endpoints

// Create a new episode
// POST /videos/1/mark-episode
// Route that requires JSON parsing middleware
app.post('/api/v1/videos/1/mark-episode', express.json(), (request, response) => {
  const incomingData = request.body

  // Log to console
  console.log(incomingData)

  // [TODO] 
  // 1: Save the incoming data to a database
  // 2: Respond with an updated video data object

  // Response fake data
  const data = {
    name: 'John Doe',
    age: 30,
    email: 'johndoe@example.com'
  };

  // Sends JSON response
  response
    .status(200)
    .json(data);
})

// Other APIs
// Edit an episode
// Delete an episode


// Start the server
app.listen(PORT, () => {
  console.log(`ðŸ‘‹ Started server on port ${PORT}`)
})